@page "/beer/edit/{Id:int?}/"

<PageHeader>@Title</PageHeader>

@if (model != null)
{
    <EditForm Model="@model" OnValidSubmit="SubmitAsync">
        <DataAnnotationsValidator />

        <MudGrid>
            <MudItem xs="12">
                <MudPaper Class="pa-5">
                    <MudTextField Label="Name" HelperText="Unique name. Should probably include a cat."
                              @bind-Value="model.Name" For="@(() => model.Name)"
                              Class="pb-2"/>
                    <MudTextField Label="Type" HelperText="Beer type (IPA, Porter, etc.)"
                                  @bind-Value="model.Type" For="@(() => model.Type)"
                                  Class="pb-2" />
                    <MudNumericField Label="IBUs" HelperText="Level of bitterness and flavor"
                                     @bind-Value="model.IBU" For="@(() => model.IBU)"
                                     Variant="Variant.Text" Step="1"
                                     Class="pb-2" />
                    <MudTextField Label="Description" HelperText="Describe beer type, hops, etc." Variant="Variant.Text" 
                                  @bind-Value="model.Description" For="@(() => model.Description)" Lines="5" />
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Class="pa-5">
                    <MudNumericField Label="ABV" HelperText="Alcohol by Volume"
                                     @bind-Value="model.ABV" For="@(() => model.ABV)"
                                     Variant="Variant.Text" Step=".1M"
                                     Class="pb-2" />
                    <MudNumericField Label="OG" HelperText="Original Gravity"
                                     @bind-Value="model.OG" For="@(() => model.OG)"
                                     Variant="Variant.Text" Step=".001M"
                                     Class="pb-2" />
                    <MudNumericField Label="FG" HelperText="Final Gravity"
                                     @bind-Value="model.FG" For="@(() => model.FG)"
                                     Variant="Variant.Text" Step=".001M"
                                     Class="pb-2" />
                    <MudNumericField Label="Calculated ABV" HelperText="ABV by Gravities"
                                     For="@(() => model.CalculatedABV)"
                                     Value="model.CalculatedABV"
                                     Variant="Variant.Text" Step=".001M"
                                     Class="pb-2" Disabled="true" />
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Class="pa-5">
                    <MudDatePicker Label="Brew Date" HelperText="Date beer was brewed"
                                   @bind-Date="model.BrewDate" For="@(() => model.BrewDate)"
                                   Class="pb-2" Editable="true" ShowToolbar=false DateFormat="MM-dd-yyyy" />
                    <MudDatePicker Label="Secondary Date" HelperText="Date beer was transferred to secondary fermentation"
                                   @bind-Date="model.SecondaryDate" For="@(() => model.SecondaryDate)"
                                   Class="pb-2" Editable="true" ShowToolbar=false DateFormat="MM-dd-yyyy" />
                    <MudDatePicker Label="Tap Date" HelperText="Date beer was tapped"
                                   @bind-Date="model.TapDate" For="@(() => model.TapDate)"
                                   Class="pb-2" Editable="true" ShowToolbar=false DateFormat="MM-dd-yyyy" />
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Class="pa-5">
                    <MudTextField Label="Ingredients" HelperText="Free-form list of ingredients used." Variant="Variant.Text"
                                  @bind-Value="model.Ingredients" For="@(() => model.Ingredients)" Lines="5" />
                    <MudTextField Label="Recipe" HelperText="Description and details of recipe." Variant="Variant.Text"
                                  @bind-Value="model.Recipe" For="@(() => model.Recipe)" Lines="5" />
                    <MudTextField Label="Recipe URL:" HelperText="URL to original recipe."
                                  @bind-Value="model.Url" For="@(() => model.Url)" />
                    <MudTextField Label="Notes" HelperText="Any additional notes regarding the brew." Variant="Variant.Text"
                                  @bind-Value="model.Notes" For="@(() => model.Notes)" Lines="5" />
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.h5">Image</MudText>
                <InputFile id="fileInput" OnChange="UploadFilesAsync" hidden />
                <MudCard Elevation="10" Class="my-6 mx-2">
                    @if (model.ImagePath != null)
                    {
                        <MudCardMedia Image="@model.ImagePath" Height="180" Title="@model.ImagePath" />
                    }
                    <MudCardActions>
                        @if (model.ImagePath == null)
                        {
                            <MudButton HtmlTag="label" Variant="Variant.Text" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Image" for="fileInput">Upload</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Image" OnClick="DeleteFileAsync">Delete</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                <div class="d-flex justify-center pb-6">
                    <MudButtonGroup OverrideStyles="false">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
                        @if (!IsNew)
                        {
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled"
                                       Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="DeleteAsync">Delete</MudButton>
                        }
                    </MudButtonGroup>
                </div>
            </MudItem>
        </MudGrid>
    </EditForm>
}
else
{
    <MudText>Beer not found.</MudText>
}

@inject IBeerCommandService CommandService
@inject IBeerQueryService QueryService
@inject IFileHandler FileHandler
@inject IDialogService DialogService
@inject NavigationManager NavManager

@code {
    [Parameter]
    public int? Id { get; set; }

    protected string Title { get; private set; }

    BeerEditModel model;

    protected bool IsNew => Id == null;

    protected override async Task OnParametersSetAsync()
    {
        Title = IsNew ? "Add New Beer" : "Edit Beer";
        model = await QueryService.BuildEditModelAsync(Id);
    }

    protected async Task SubmitAsync(EditContext context)
    {
        Id = await CommandService.SaveAsync(model);
        model.Id = Id;
        RedirectToList();
    }

    protected async Task UploadFilesAsync(InputFileChangeEventArgs e)
    {
        model.ImagePath = await FileHandler.UploadAsync(e.File);
        StateHasChanged();
    }

    protected async Task DeleteFileAsync()
    {
        if (string.IsNullOrWhiteSpace(model.ImagePath))
            return;

        bool? result = await DialogService.ShowMessageBox(
           "Deletion Warning",
           "Deleting this image is a permanent action and cannot be undone.",
           yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            await FileHandler.DeleteAsync(model.ImagePath);
            model.ImagePath = null;

            if (!IsNew)
                await CommandService.RemoveImageAsync(model.Id.Value);

            StateHasChanged();
        }
    }

    protected async Task DeleteAsync()
    {
        if (IsNew)
            return;

        bool? result = await DialogService.ShowMessageBox(
           "Deletion Warning",
           "Deleting this Beer is a permanent action. Any previous weight changes, pour metrics, and the image will be deleted.",
           yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            await CommandService.DeleteAsync(model.Id.Value);
            RedirectToList();
        }
    }

    protected void RedirectToList()
    {
        NavManager.NavigateTo("/beer/", forceLoad: true);
    }
}
