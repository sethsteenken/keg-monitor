@page "/beer/edit/{Id:int?}/"

<PageHeader>@Title</PageHeader>

@if (model != null)
{
    <EditForm Model="@model" OnValidSubmit="SubmitAsync">
        <DataAnnotationsValidator />

        <MudGrid>
            <MudItem xs="12">
                <MudPaper Class="pa-5">
                    <MudTextField Label="Name" HelperText="Unique name. Should probably include a cat."
                              @bind-Value="model.Name" For="@(() => model.Name)"
                              Class="pb-2"/>
                    <MudTextField Label="Type" HelperText="Beer type (IPA, Porter, etc.)"
                                  @bind-Value="model.Type" For="@(() => model.Type)"
                                  Class="pb-2" />
                    <MudNumericField Label="ABV" HelperText="Alcohol by Volume"
                                     @bind-Value="model.ABV" For="@(() => model.ABV)"
                                     Variant="Variant.Text" Step=".1M"
                                     Class="pb-2"/>
                    <MudNumericField Label="OG" HelperText="Original Gravity"
                                     @bind-Value="model.OG" For="@(() => model.OG)"
                                     Variant="Variant.Text" Step=".001M"
                                     Class="pb-2" />
                    <MudNumericField Label="FG" HelperText="Final Gravity"
                                     @bind-Value="model.FG" For="@(() => model.FG)"
                                     Variant="Variant.Text" Step=".001M"
                                     Class="pb-2" />
                    <MudTextField Label="Description" HelperText="Describe beer type, hops, etc." Variant="Variant.Text" 
                                  @bind-Value="model.Description" For="@(() => model.Description)" Lines="5" />
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.h5">Image</MudText>
                <InputFile id="fileInput" OnChange="UploadFilesAsync" hidden />
                <MudCard Elevation="10" Class="my-6 mx-2">
                    @if (model.ImagePath != null)
                    {
                        <MudCardMedia Image="@model.ImagePath" Height="180" Alt="@model.ImagePath" />
                    }
                    <MudCardActions>
                        <MudButton HtmlTag="label" Variant="Variant.Text" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Image" for="fileInput">Upload</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Image" OnClick="() => model.ImagePath = null">Delete</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                <div class="d-flex justify-center pb-6">
                    <MudButtonGroup OverrideStyles="false">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
                        @if (!IsNew)
                        {
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled"
                                       Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="DeleteAsync">Delete</MudButton>
                        }
                    </MudButtonGroup>
                </div>
            </MudItem>
        </MudGrid>
    </EditForm>
}
else
{
    <MudText>Beer not found.</MudText>
}

@inject ISnackbar Snackbar
@inject IBeerCommandService CommandService
@inject IBeerQueryService QueryService
@inject IFileUploader FileUploader
@inject IDialogService DialogService
@inject NavigationManager NavManager

@code {
    [Parameter]
    public int? Id { get; set; }

    protected string Title { get; private set; }

    BeerEditModel model;

    protected bool IsNew => Id == null;

    protected override async Task OnParametersSetAsync()
    {
        Title = IsNew ? "Add New Beer" : "Edit Beer";
        model = await QueryService.BuildEditModelAsync(Id);
    }

    protected async Task SubmitAsync(EditContext context)
    {
        Id = await CommandService.SaveAsync(model);
        model.Id = Id;
        Snackbar.Add("Beer saved successfully.", Severity.Success, config => config.CloseAfterNavigation = true);
        StateHasChanged();
    }

    protected async Task UploadFilesAsync(InputFileChangeEventArgs e)
    {
        model.ImagePath = await FileUploader.UploadAsync(e.File);
        StateHasChanged();
    }

    protected async Task DeleteAsync()
    {
        if (IsNew)
            return;

        bool? result = await DialogService.ShowMessageBox(
           "Deletion Warning",
           "Deleting this Beer is a permanent action. Any previous weight changes and pour metrics will be deleted.",
           yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            await CommandService.DeleteAsync(model.Id.Value);
            NavManager.NavigateTo("/beer/", forceLoad: true);
        }
    }
}
