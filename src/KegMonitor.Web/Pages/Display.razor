@page "/display/"
@layout DisplayLayout
@using KegMonitor.Web.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageTitle>Keg Monitor</PageTitle>

@if (scales != null && scales.Any())
{
    @foreach (var scale in scales)
    {
        <MudCard Elevation="10" Class="my-4 mx-2">
            @if (scale.Beer != null)
            {
                <MudCardMedia Image="@scale.Beer.ImagePath" Height="180" Title="@scale.Beer.Name" />
            }
            <MudCardContent>
                @if (scale.Beer != null)
                {
                    <div class="d-flex">
                        <MudText Typo="Typo.h4" Class="pb-1">@scale.Beer.Name</MudText>
                            <div class="ml-auto">
                                <SensorStatus ScaleId="@scale.Id" InitialStatus="@scale.SensorStatus" DisableManualToggle="true"></SensorStatus>
                            </div>
                        </div>

                    <MudText Typo="Typo.h6" Class="pb-1">@scale.Beer.Type - @(scale.Beer.ABV)% ABV</MudText>
                    @if (scale.Beer.IBU != null && scale.Beer.IBU > 0)
                    {
                        <MudText Class="pb-1" Typo="Typo.body1">@(scale.Beer.IBU) IBUs</MudText>
                    }
                    <MudText Class="pb-1" Typo="Typo.body2">@scale.Beer.Description</MudText>
                }
                <MudProgressLinear Color="@scale.Color" Rounded="true" Size="Size.Large" Value="@scale.Percentage" />
            </MudCardContent>
        </MudCard>
    }
}
else
{
    <MudCard Elevation="10" Class="my-4 mx-2">
        <MudCardContent>
            <MudText Typo="Typo.h4" Class="pb-1">No active Scales found.</MudText>
            <MudText Typo="Typo.body1" Class="pb-1"><MudLink Href="/scale/add/">Click here</MudLink> to add a new Scale or return to the Dashboard, select a Scale, and set the Scale to Active status.</MudText>
        </MudCardContent>
    </MudCard>
}


@inject ISnackbar Snackbar
@inject HubConnectionFactory HubConnectionFactory
@inject IScaleDisplayQueryService QueryService

@code {
    private HubConnection hubConnection;

    List<ScaleDisplayItem> scales = new List<ScaleDisplayItem>();

    protected override async Task OnInitializedAsync()
    {
        scales = await QueryService.GetScalesAsync(activeOnly: true);

        hubConnection = HubConnectionFactory.CreateConnection(ScaleHub.Endpoint);

        hubConnection.On<int, decimal>(ScaleHub.ReceiveWeightPercentage, async (scaleId, percentage) =>
        {
            var scale = scales.SingleOrDefault(s => s.Id == scaleId);
            if (scale != null)
            {
                scale.Percentage = (double)percentage;
                await InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<int, string>(ScaleHub.ReceiveNewPour, async (scaleId, message) =>
        {
            Snackbar.Add(message, Severity.Success);
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}