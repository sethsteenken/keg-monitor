@page "/scale/edit/{Id:int}/"
@using KegMonitor.Core.Entities
@using KegMonitor.Web.Hubs
@using Microsoft.AspNetCore.SignalR.Client

@{
    string title = $"Edit Scale #{Id}";
}

<PageTitle>@title</PageTitle>

@if (model != null)
{
    <MudCard Elevation="10" Class="my-6">
        <MudCardHeader Class="pb-0">
            <CardHeaderContent>
                <MudText Typo="Typo.h4" Class="pb-1">@title</MudText>
                <MudText Typo="Typo.h5">Weight: @weight</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                @if (model.Active)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.CheckBox"
                                   title="Scale is currently Active. Click to deactivate."
                                   Color="Color.Success"
                                   OnClick="ConfirmDeactivateAsync" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Archive"
                                   title="Scale is currently Inactive. Click to activate."
                                   Color="Color.Error"
                                   OnClick="ConfirmActivateAsync"/>
                }
                <SensorStatus ScaleId="@model.Id"></SensorStatus>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            @if (model.Active)
            {
                <MudText>This Scale is currently <span class="green-text">Active</span> and cannot be edited.</MudText>
            }
            else
            {
                <MudText>This Scale is currently <span class="red-text">Inactive</span> and may be edited.</MudText>
            }
        </MudCardContent>
    </MudCard>
    

    <EditForm Model="@model" OnValidSubmit="SubmitAsync">
        <DataAnnotationsValidator />

        <MudGrid>
            <MudItem xs="12">
                <MudPaper Class="mud-width-full pa-5">
                    <MudText Typo="Typo.h5">Beer</MudText>
                    <MudSelect @bind-Value="model.BeerId" T="int?" Label="Beer" Placeholder="Select Beer"
                           HelperText="Select a Beer for the keg on this Scale. Deactivate this Scale to manually change." 
                           OpenIcon="@Icons.Material.Filled.LocalDrink" AdornmentColor="Color.Secondary"
                           Disabled="model.Active" Clearable="true" Class="pb-2">
                        @foreach (Beer beer in model.BeerOptions)
                        {
                            <MudSelectItem Value="@((int?)beer.Id)">@beer.FullName</MudSelectItem>
                        }
                    </MudSelect>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Class="mud-width-full pa-5">
                    <MudNumericField Label="Current Weight" HelperText="Current Weight in grams provided by sensor. Deactivate this Scale to manually change."
                                     @bind-Value="model.CurrentWeight" For="@(() => model.CurrentWeight)" Disabled="model.Active" Class="pb-2" />
                    <MudNumericField Label="Empty Weight" HelperText="Weight in grams provided by sensor when keg is empty. Deactivate this Scale to manually change."
                                     @bind-Value="model.EmptyWeight" For="@(() => model.EmptyWeight)" Disabled="model.Active" Class="pb-2" />
                    <MudNumericField Label="Full Weight" HelperText="Weight in grams provided by sensor when keg is full. Deactivate this Scale to manually change."
                                     @bind-Value="model.FullWeight" For="@(() => model.FullWeight)" Disabled="model.Active" />
                    <MudNumericField Label="Pour Threshold" HelperText="Weight in grams that passes threshold for triggering a pour event. Deactivate this Scale to manually change."
                                     @bind-Value="model.PourDifferenceThreshold" For="@(() => model.PourDifferenceThreshold)" Disabled="model.Active" Class="pb-2" />
                    <MudTextField Label="MQTT Topic" HelperText="Topic for MQTT published communications specific for this scale."
                                    @bind-Value="model.Topic" For="@(() => model.Topic)" Disabled="model.Active" Class="pb-2"></MudTextField>
                    <MudTextField Label="Device Endpoint" HelperText="IP address or domain name for the scale device."
                                    @bind-Value="model.Endpoint" For="@(() => model.Endpoint)" Disabled="model.Active" Class="pb-2"></MudTextField>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <div class="d-flex justify-center pb-6">
                    <MudButtonGroup OverrideStyles="false">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Save" Disabled="model.Active">Save</MudButton>
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled"
                                   Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Disabled="model.Active"
                                   OnClick="DeleteAsync">Delete</MudButton>
                    </MudButtonGroup>
                    
                </div>
            </MudItem>
        </MudGrid>    
    </EditForm>

    <Logs></Logs>
}
else
{
    <MudText>Scale not found.</MudText>
}

@inject HubConnectionFactory HubConnectionFactory
@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IScaleQueryService QueryService
@inject IScaleCommandService CommandService

@code {
    [Parameter]
    public int Id { get; set; }

    private HubConnection hubConnection;

    int weight = 0;

    ScaleEditModel model;

    protected override async Task OnParametersSetAsync()
    {
        model = await QueryService.BuildEditModelAsync(Id);
        if (model != null)
            weight = model.CurrentWeight;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = HubConnectionFactory.CreateConnection(ScaleHub.Endpoint);

        hubConnection.On<int, int>(ScaleHub.ReceiveWeight, (scaleId, newWeight) =>
        {
            if (scaleId == model?.Id)
            {
                weight = newWeight;
                InvokeAsync(StateHasChanged);
            } 
        });

        await hubConnection.StartAsync();
    }

    protected async Task ConfirmDeactivateAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
           "Warning", 
           "Deactivating this Scale will stop all weight recordings.", 
           yesText:"Deactivate", cancelText:"Cancel");

        if (result == true)
        {
            await CommandService.UpdateActiveStateAsync(Id, false);
            model.Active = false;
            Snackbar.Add($"Scale #{model.Id} deactivated.", Severity.Warning);
        }

        StateHasChanged();
    }

    protected async Task ConfirmActivateAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
           "Warning", 
           "Activating this Scale will disable all fields and weight changes will be recorded.", 
           yesText:"Activate", cancelText:"Cancel");

        if (result == true)
        {
            await CommandService.UpdateActiveStateAsync(Id, true);
            model.Active = true;
            Snackbar.Add($"Scale #{model.Id} activated.", Severity.Success);
        }

        StateHasChanged();
    }

    protected async Task SubmitAsync(EditContext context)
    {
        Id = await CommandService.SaveAsync(model);
        model.Id = Id;
        Snackbar.Add($"Scale #{model.Id} saved successfully.", Severity.Success, config => config.CloseAfterNavigation = true);
        StateHasChanged();
    }

    protected async Task DeleteAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
           "Deletion Warning",
           "Deleting this Scale is a permanent action. Any previous weight changes and pour metrics will be deleted.",
           yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            await CommandService.DeleteAsync(Id);
            NavManager.NavigateTo("/", forceLoad: true);
        }
    }
}

