@page "/"
@using KegMonitor.SignalR
@using KegMonitor.Web.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageHeader>Keg Monitor Dashboard</PageHeader>

@if (loading)
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
}

@if (!loading)
{
    @if (!model.Scales.Any())
    {
        <MudText Typo="Typo.body1" Class="pb-1">No Scales found. Click <MudLink Href="/scale/add/" Underline="Underline.Always">here</MudLink> to add a Scale.</MudText>
    }

    @foreach (var scale in model.Scales)
    {
        <MudCard Elevation="10" Class="mb-6">
            <MudCardHeader Class="pb-0">
                <CardHeaderContent>
                    <MudText Typo="Typo.h4" Class="pb-1">Scale #@scale.Id</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    @{
                        var editLink = $"/scale/edit/{scale.Id}/";
                    }
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" Href="@editLink" />
                    <SensorStatus Sensor="@scale.Sensor" ScaleId="@scale.Id" Online="@scale.WeightMetricsData.HasRecentTimestamp"></SensorStatus>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudText>Weight: <MudText Color="Color.Primary" Inline=true>@scale.Weight</MudText> / <MudText Color="Color.Secondary" Inline=true>@scale.Percentage%</MudText></MudText>

                @if (scale.Beer != null)
                {
                    <MudText Typo="Typo.h3" Class="pb-1">@scale.Beer.Name</MudText>
                    <MudText Typo="Typo.h5" Class="pb-1">@scale.Beer.Type @(scale.Beer.ABV)%</MudText>
                    <MudText Typo="Typo.h5" Class="pb-1">Gravity: @scale.Beer.OG - @scale.Beer.FG</MudText>
                    <MudText Class="pb-1">@scale.Beer.Description</MudText>
                }

                @if (scale.Active)
                {
                    <MudProgressLinear Color="@scale.Color" Rounded="true" Size="Size.Large" @bind-Value="@scale.Percentage" />
                }
                else
                {
                    <MudText Typo="Typo.h4" Class="pb-1 red-text">Inactive</MudText>
                    <MudProgressLinear Color="Color.Dark" Rounded="true" Size="Size.Large" Value="0" />
                }

                @if (scale.WeightMetricsData != null)
                {
                    <MudStack Row="true" Class="my-2">
                        <MudPaper Class="pa-2">Weight: @scale.WeightMetricsData.CurrentWeight</MudPaper>
                        <MudPaper Class="pa-2">Count: @scale.WeightMetricsData.NumWeightChanges</MudPaper>
                        <MudPaper Class="pa-2">Average:  @scale.WeightMetricsData.Average</MudPaper>
                        <MudPaper Class="pa-2">Min:  @scale.WeightMetricsData.Min</MudPaper>
                        <MudPaper Class="pa-2">Max:  @scale.WeightMetricsData.Max</MudPaper>
                    </MudStack>

                    <MudTable Items="@scale.WeightMetricsData.WeightChangesForDisplay" Breakpoint="Breakpoint.None"
                      FixedHeader="true" Height="400px" Bordered="true" Dense="true" Hover="true">
                        <HeaderContent>
                            <MudTh>Timestamp</MudTh>
                            <MudTh>Weight</MudTh>
                            <MudTh>Pour?</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Timestamp">@context.TimeStamp</MudTd>
                            <MudTd DataLabel="Weight">@context.Weight</MudTd>
                            <MudTd DataLabel="Pour">
                                @if (context.IsPourEvent)
                                {
                                    <MudIcon Icon="@Icons.Material.Sharp.CheckCircle" Color="Color.Success" />
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>

                    @if (scale.WeightMetricsData.Chart != null)
                    {
                        <MudChart ChartType="ChartType.Line"
                              ChartSeries="new List<ChartSeries>() { scale.WeightMetricsData.Chart.Data }"
                              ChartOptions="@scale.WeightMetricsData.Chart.Options"
                              XAxisLabels="@scale.WeightMetricsData.Chart.XLabels"
                              Width="100%"
                              Height="350px"></MudChart>
                    }

                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="d-flex justify-center flex-grow-1">
                        <MudButton OnClick="() => UpdateWeightMetricsAsync(scale.Id, 20)">20</MudButton>
                        <MudButton OnClick="() => UpdateWeightMetricsAsync(scale.Id, 100)">100</MudButton>
                        <MudButton OnClick="() => UpdateWeightMetricsAsync(scale.Id, 500)">500</MudButton>
                    </MudButtonGroup>
                }
            </MudCardContent>
        </MudCard>
    }

    <Logs></Logs>
}

@inject HubConnectionFactory HubConnectionFactory
@inject IScaleDashboardQueryService QueryService

@code {
    private HubConnection hubConnection;
    ScaleDashboardModel model = new ScaleDashboardModel();
    bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        model = await QueryService.BuildModelAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(HubConnectionFactory.FormatUrl(ScaleHub.Endpoint))
            .Build();

        hubConnection.On<int, int>(ScaleHub.ReceiveWeight, async (scaleId, weight) =>
        {
            var scale = model.Scales.SingleOrDefault(s => s.Id == scaleId);
            if (scale != null)
            {
                scale.Weight = weight;
                await InvokeAsync(StateHasChanged);
                await UpdateWeightMetricsAsync(scaleId, scale.WeightMetricsData.NumWeightChanges);
            }
        });

        hubConnection.On<int, decimal>(ScaleHub.ReceiveWeightPercentage, async (scaleId, percentage) =>
        {
            var scale = model.Scales.SingleOrDefault(s => s.Id == scaleId);
            if (scale != null)
            {
                scale.Percentage = (double)percentage;
                await InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
        loading = false;
    }

    protected async Task UpdateWeightMetricsAsync(int scaleId, int numOfWeightChanges)
    {
        var scale = model.Scales.SingleOrDefault(s => s.Id == scaleId);
        if (scale != null)
        {
            scale.WeightMetricsData = await QueryService.GetWeightMetricsAsync(scaleId, numOfWeightChanges);
            await InvokeAsync(StateHasChanged);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}