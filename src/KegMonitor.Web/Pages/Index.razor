@page "/"
@using KegMonitor.Web.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageHeader>Keg Monitor Dashboard</PageHeader>

@foreach (var scale in scales)
{
    <MudCard Elevation="10" Class="my-6 mx-2">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText>Weight: @scale.Weight</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                @{
                    var editLink = $"/scale/edit/{scale.Id}/"; 
                }
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" Href="@editLink" />
            </CardHeaderActions>
        </MudCardHeader>
        @if (scale.Active && scale.Beer != null && !string.IsNullOrWhiteSpace(scale.Beer.ImagePath))
        {
            <MudCardMedia Image="@scale.Beer.ImagePath" Height="250" Alt="@scale.Beer.Name" />
        }
        <MudCardContent>
            @if (scale.Active && scale.Beer != null)
            {
                <MudText Typo="Typo.h4" Class="pb-1">@scale.Beer.Name (@(scale.Beer.Type)) @(scale.Beer.ABV)%</MudText>
                <MudText Class="pb-1">@scale.Beer.Description</MudText>
                <MudProgressLinear Color="@scale.Color" Rounded="true" Size="Size.Large" @bind-Value="@scale.Percentage" />
            }
            else
            {
                <MudText Typo="Typo.h4" Class="pb-1">Scale @scale.Id - <span class="red-text">Inactive</span></MudText>
                <MudProgressLinear Color="Color.Dark" Rounded="true" Size="Size.Large" Value="0" />
            }
        </MudCardContent>
    </MudCard>
}


@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IScaleDashboardQueryService QueryService

@code {
    private HubConnection hubConnection;

    List<ScaleDisplayItem> scales = new List<ScaleDisplayItem>();

    protected override async Task OnParametersSetAsync()
    {
        scales = await QueryService.GetScalesAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(ScaleHub.Endpoint))
            .Build();

        hubConnection.On<int, int>(ScaleHub.ReceiveWeight, (scaleId, weight) =>
        {
            scales.Single(s => s.Id == scaleId).Weight = weight;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int, decimal>(ScaleHub.ReceiveWeightPercentage, (scaleId, percentage) =>
        {
            scales.Single(s => s.Id == scaleId).Percentage = (double)percentage;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int, string>(ScaleHub.ReceiveNewPour, (scaleId, message) =>
        {
            Snackbar.Add(message, Severity.Success);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}