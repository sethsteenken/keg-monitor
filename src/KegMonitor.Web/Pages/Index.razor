@page "/"
@using KegMonitor.SignalR
@using KegMonitor.Web.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageHeader>Keg Monitor Dashboard</PageHeader>

@if (!model.Scales.Any())
{
     <MudText Typo="Typo.body1" Class="pb-1">Add Scales to the database to get started.</MudText>
}

@if (model.ChartSeries.Any())
{
    foreach (var chartSeries in model.ChartSeries)
    {
        <MudChart ChartType="ChartType.Bar" 
                  ChartSeries="new List<ChartSeries>() { chartSeries }" 
                  XAxisLabels="@model.ChartXLabels" 
                  Width="100%" 
                  Height="350px"></MudChart>    
    }
}

@foreach (var scale in model.Scales)
{
    <MudCard Elevation="10" Class="my-6 mx-2">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText>Weight: @scale.Weight</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                @{
                    var editLink = $"/scale/edit/{scale.Id}/"; 
                }
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" Href="@editLink" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.h4" Class="pb-1">Scale #@scale.Id</MudText>

            @if (scale.Beer != null)
            {
                <MudText Typo="Typo.h3" Class="pb-1">@scale.Beer.Name</MudText>
                <MudText Typo="Typo.h5" Class="pb-1">@scale.Beer.Type @(scale.Beer.ABV)%</MudText>
                <MudText Class="pb-1">@scale.Beer.Description</MudText>
            }

            @if (scale.Active)
            {
                <MudProgressLinear Color="@scale.Color" Rounded="true" Size="Size.Large" @bind-Value="@scale.Percentage" />
            }
            else
            {
                <MudText Typo="Typo.h4" Class="pb-1 red-text">Inactive</MudText>
                <MudProgressLinear Color="Color.Dark" Rounded="true" Size="Size.Large" Value="0" />
            }
        </MudCardContent>
    </MudCard>
}

<Logs></Logs>

@inject NavigationManager NavigationManager
@inject IScaleDashboardQueryService QueryService

@code {
    private HubConnection hubConnection;
    ScaleDashboardModel model = new ScaleDashboardModel();

    protected override async Task OnParametersSetAsync()
    {
        model = await QueryService.BuildModelAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(ScaleHub.Endpoint))
            .Build();

        hubConnection.On<int, int>(ScaleHub.ReceiveWeight, (scaleId, weight) =>
        {
            model.Scales.Single(s => s.Id == scaleId).Weight = weight;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int, decimal>(ScaleHub.ReceiveWeightPercentage, (scaleId, percentage) =>
        {
            model.Scales.Single(s => s.Id == scaleId).Percentage = (double)percentage;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}