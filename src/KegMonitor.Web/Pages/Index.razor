@page "/"
@using KegMonitor.Core
@using KegMonitor.SignalR
@using KegMonitor.Web.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageHeader>Keg Monitor Dashboard</PageHeader>

@foreach (var scale in scales)
{
    <MudCard Elevation="10" Class="my-6 mx-2">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText>Weight: @scale.Weight</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                @{
                    var editLink = $"/scale/edit/{scale.Id}/"; 
                }
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" Href="@editLink" />
            </CardHeaderActions>
        </MudCardHeader>
        @if (scale.Active && scale.Beer != null && !string.IsNullOrWhiteSpace(scale.Beer.ImagePath))
        {
            <MudCardMedia Image="@scale.Beer.ImagePath" Height="250" Alt="@scale.Beer.Name" />
        }
        <MudCardContent>
            @if (scale.Active && scale.Beer != null)
            {
                <MudText Typo="Typo.h3" Class="pb-1">@scale.Beer.Name</MudText>
                <MudText Typo="Typo.h5" Class="pb-1">@scale.Beer.Type @(scale.Beer.ABV)%</MudText>
                <MudText Class="pb-1">@scale.Beer.Description</MudText>
                <MudProgressLinear Color="@scale.Color" Rounded="true" Size="Size.Large" @bind-Value="@scale.Percentage" />
            }
            else
            {
                <MudText Typo="Typo.h4" Class="pb-1">Scale @scale.Id - <span class="red-text">Inactive</span></MudText>
                <MudProgressLinear Color="Color.Dark" Rounded="true" Size="Size.Large" Value="0" />
            }
        </MudCardContent>
    </MudCard>
}

<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Notes" Color="Color.Secondary" 
                OnClick="() => displayLog = !displayLog">Display Log</MudButton>

@if (displayLog)
{
    <MudTable Items="@logMessages" Breakpoint="Breakpoint.Sm" Striped="true" Elevation="2">
        <HeaderContent>
            <MudTh>Logger</MudTh>
            <MudTh>Level</MudTh>
            <MudTh>Message</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Logger">@context.Logger</MudTd>
            <MudTd DataLabel="Level">@context.Level</MudTd>
            <MudTd DataLabel="Message">@context.Message</MudTd>
        </RowTemplate>
    </MudTable>
}

@inject NavigationManager NavigationManager
@inject IScaleDashboardQueryService QueryService

@code {
    private HubConnection scaleHubConnection;
    private HubConnection logHubConnection;

    bool displayLog = false;

    List<LogMessage> logMessages = new List<LogMessage>();
    List<ScaleDisplayItem> scales = new List<ScaleDisplayItem>();

    protected override async Task OnParametersSetAsync()
    {
        scales = await QueryService.GetScalesAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        scaleHubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(ScaleHub.Endpoint))
            .Build();

        scaleHubConnection.On<int, int>(ScaleHub.ReceiveWeight, (scaleId, weight) =>
        {
            scales.Single(s => s.Id == scaleId).Weight = weight;
            InvokeAsync(StateHasChanged);
        });

        scaleHubConnection.On<int, decimal>(ScaleHub.ReceiveWeightPercentage, (scaleId, percentage) =>
        {
            scales.Single(s => s.Id == scaleId).Percentage = (double)percentage;
            InvokeAsync(StateHasChanged);
        });

        await scaleHubConnection.StartAsync();

        logHubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(LogHub.Endpoint))
            .Build();

        logHubConnection.On<string, string, string>(LogHub.ReceiveMessage, (name, level, message) =>
        {
            if (logMessages.Count < 1000)
            {
                logMessages.Insert(0, new LogMessage()
                {
                    Logger = name,
                    Level = level,
                    Message = message
                });

                InvokeAsync(StateHasChanged);
            }
        });

        await logHubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (scaleHubConnection is not null)
            await scaleHubConnection.DisposeAsync();

        if (logHubConnection is not null)
            await logHubConnection.DisposeAsync();
    }
}