@using KegMonitor.Core
@using KegMonitor.SignalR
@using KegMonitor.Web.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Notes" Color="Color.Secondary" 
                OnClick="() => Display = !Display">Display Log</MudButton>

@if (Display)
{
    <MudTable Items="@logMessages" Breakpoint="Breakpoint.Sm" Striped="true" Elevation="2">
        <HeaderContent>
            <MudTh>Timestamp</MudTh>
            <MudTh>Logger</MudTh>
            <MudTh>Level</MudTh>
            <MudTh>Message</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Timestamp">@context.Timestamp.Value.ToLongTimeString()</MudTd>
            <MudTd DataLabel="Logger">@context.Logger</MudTd>
            <MudTd DataLabel="Level">@context.Level</MudTd>
            <MudTd DataLabel="Message">@context.Message</MudTd>
        </RowTemplate>
    </MudTable>
}

@inject NavigationManager NavigationManager

@code {
    private HubConnection hubConnection;

    [Parameter]
    public bool Display { get; set; } = false;

    List<LogMessage> logMessages = new List<LogMessage>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(LogHub.Endpoint))
            .Build();

        hubConnection.On<string, string, string>(LogHub.ReceiveMessage, (name, level, message) =>
        {
            if (logMessages.Count < 1000)
            {
                logMessages.Insert(0, new LogMessage()
                {
                    Logger = name,
                    Level = level,
                    Message = message,
                    Timestamp = DateTime.Now
                });

                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}